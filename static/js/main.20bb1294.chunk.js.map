{"version":3,"sources":["Assets/Images/snow.jpg","Assets/Images/storm.jpeg","Assets/Images/rain.jpg","Assets/Images/clear.jpg","Assets/Images/cloudy.jpg","Assets/Images/background.jpg","util/OpenWeather.js","Components/SearchBar/SearchBar.js","Components/WeatherList/WeatherList.js","Components/SearchResults/SearchResults.js","Components/App/App.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","searchMethod","SearchBar","props","search","bind","handleTermChange","this","onSearch","state","term","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","WeatherList","weather","SearchResults","searchResults","fetch","require","OpenWeather","searchWeather","searchTerm","length","Number","parseInt","getSearchMethod","then","response","json","jsonResponse","console","log","list","main","catch","error","App","bgImage","background","changeBackground","clear","cloudy","rain","storm","snow","style","backgroundImage","ReactDOM","render","StrictMode","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.20bb1294.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snow.beb6b32c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.6868ff7a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/rain.02e3c5e1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear.04969f7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.c842ece1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.9836b0bb.jpg\";","let apiKey = 'ec9d7d715df637631606fb17c5a2b580';\nconst fetch = require(\"node-fetch\");\nlet units = 'metric';\nlet searchMethod;\n\nfunction getSearchMethod(searchTerm) {\n  if (searchTerm.length === 5 && Number.parseInt(searchTerm) + '' === searchTerm) {\n    searchMethod = 'zip';\n  } else {\n    searchMethod = 'q';\n  }\n}\n\n/*function init(resultFromServer) {\n  console.log('weather type:', resultFromServer.list[0].weather[0].main);\n}*/\n\nconst OpenWeather = {\n  searchWeather(searchTerm) {\n    getSearchMethod(searchTerm);\n    //console.log('searchWeather is running...');\n    return fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?${searchMethod}=${searchTerm}&APPID=${apiKey}&units=${units}`).then(response => {\n      //console.log('result:', result)\n      return response.json();\n    }).then(jsonResponse => {\n      //init(jsonResult);\n      console.log('jsonResponse is:', jsonResponse)\n      return jsonResponse.list[0].weather[0].main\n    }).catch((error) => {\n      console.log(error);\n    })\n  }\n}\n\n//console.log(OpenWeather.searchWeather('prague'))\n\nexport default OpenWeather;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term)\n  } \n\n  handleTermChange(event){\n    this.setState({term: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A City\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './WeatherList.css';\n\nclass WeatherList extends React.Component {\n  render() {\n    return (\n      <div className=\"WeatherList\">\n        {this.props.weather}\n      </div>\n    )\n  }\n}\n\nexport default WeatherList;\n","import React from 'react';\nimport WeatherList from '../WeatherList/WeatherList'\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"day-container\">\n        <h1>Weather is:</h1>\n        <WeatherList weather={this.props.searchResults}/>\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport OpenWeather from '../../util/OpenWeather';\nimport snow from '../../Assets/Images/snow.jpg';\nimport storm from '../../Assets/Images/storm.jpeg';\nimport rain from '../../Assets/Images/rain.jpg';\nimport clear from '../../Assets/Images/clear.jpg';\nimport cloudy from '../../Assets/Images/cloudy.jpg';\nimport background from '../../Assets/Images/background.jpg';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      bgImage: `url(${background})`\n    }\n    this.search = this.search.bind(this);\n    this.changeBackground = this.changeBackground.bind(this);\n  }\n\n  changeBackground(searchResults){     \n    console.log('change background to:', searchResults);   \n    switch (searchResults) {\n      case 'Clear':\n        this.setState({bgImage: `url(${clear})`});\n        break;\n    \n      case 'Clouds':\n        this.setState({bgImage: `url(${cloudy})`});\n        break;\n      \n      case 'Rain':\n      case 'Drizzle':\n      case 'Mist':\n        this.setState({bgImage: `url(${rain})`});\n        break;\n      \n      case 'Thunderstorm':\n        this.setState({bgImage: `url(${storm})`});\n        break;\n    \n      case 'Snow':\n        this.setState({bgImage: `url(${snow})`});\n        break;\n      \n      default:\n        break;\n    }\n  }\n\n  search(term){\n    OpenWeather.searchWeather(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n      console.log('search:', searchResults);\n      this.changeBackground(searchResults)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <body style={{backgroundImage: this.state.bgImage}} className=\"Body\">\n          <h1>Weather App</h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.search}/>\n            <div className=\"day-container\">\n              <SearchResults searchResults={this.state.searchResults} />\n            </div>\n          </div>\n        </body>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}